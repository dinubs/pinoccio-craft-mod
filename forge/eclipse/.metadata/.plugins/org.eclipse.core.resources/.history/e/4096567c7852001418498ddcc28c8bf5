package gavin.pinoccio;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import net.minecraft.client.Minecraft;
import net.minecraft.command.CommandBase;
import net.minecraft.command.CommandException;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.WrongUsageException;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.common.config.Property;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

public class LedCommand extends CommandBase {
		
	  public PinoccioAPI pinoccioAPI = new PinoccioAPI();
	
	  public int troopId;
	  public int scoutId;
	  public String apiKey;
	  public String[] colors = {"on", "off", "red", "green", "blue", "cyan", "purple", "magenta", "yellow", "orange", "white", "torch"};
	
	  private List aliases;
	  public LedCommand(String key, int troop, int scout)
	  {
	    this.aliases = new ArrayList();
	    this.aliases.add("led");
	    this.apiKey = key;
	    this.troopId = troop;
	    this.scoutId = scout;
	    
	  }

	  @Override
	  public String getCommandName()
	  {
	    return "led";
	  }

	  @Override
	  public String getCommandUsage(ICommandSender icommandsender)
	  {
	    return "led <command>";
	  }

	  @Override
	  public List getCommandAliases()
	  {
	    return this.aliases;
	  }

	  @Override
	  public void processCommand(ICommandSender icommandsender, String[] astring)
	  {
	    if(astring.length == 0)
	    {
	    	Minecraft.getMinecraft().thePlayer.sendChatMessage("Not enough colors entered, please use one");
	    	throw new WrongUsageException("commands.run.usage", new Object[0]);
	    }
	    if(astring.length > 1) {
	    	Minecraft.getMinecraft().thePlayer.sendChatMessage("Too many colors, please only use one");
	    	throw new CommandException("commands.run.usage", new Object[0]);
	    }
	    boolean pass = false;
	    String colorString = "";
	    int meta = 0;
	    for(int i = 0; i < this.colors.length; i++) {
	    	if (astring[0].equals(this.colors[i])) {
	    		pass = true;
	    		meta = i;
	    		i = this.colors.length;
	    		colorString = colorString + ", " + astring[i];
	    	}
	    }
	    if(!pass) {
	    	Minecraft.getMinecraft().thePlayer.sendChatMessage("Invalid color please one of the following: " + colorString);
	    	throw new CommandException("commands.read.usage", new Object[0]);
	    }
	    try {
		    this.pinoccioAPI.runBitlashCommand(this.troopId, this.scoutId, astring[0], this.apiKey);
	    } catch (IOException e) {
	    	Minecraft.getMinecraft().thePlayer.sendChatMessage("Command could not be sent, please check your Pinoccio Scout");
	    	throw new CommandException("commands.read.failed", new Object[0]);
	    } catch (Exception e) {
	    	Minecraft.getMinecraft().thePlayer.sendChatMessage("Command could not be sent, please check your Pinoccio Scout");
	    	throw new CommandException("commands.read.failed", new Object[0]);
		}
	  }

	  @Override
	  public boolean canCommandSenderUseCommand(ICommandSender icommandsender)
	  {
	    return true;
	  }

	  @Override
	  public List addTabCompletionOptions(ICommandSender icommandsender,
	      String[] astring)
	  {
	    return null;
	  }

	  @Override
	  public boolean isUsernameIndex(String[] astring, int i)
	  {
	    return false;
	  }

	  @Override
	  public int compareTo(Object o)
	  {
	    return 0;
	  }
	}