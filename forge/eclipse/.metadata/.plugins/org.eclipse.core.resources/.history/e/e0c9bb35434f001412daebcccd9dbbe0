package gavin.pinoccio;

import java.util.List;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.Minecraft;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;

public class ScoutScriptBlock extends Block {
	public PinoccioAPI pinoccioAPI = new PinoccioAPI();
	
	public int troopId;
	public int scoutId;
	public String apiKey;
	public String command = "led.red";
	public String[] commands;
	public int commandNum = 0;

	protected ScoutScriptBlock(Material mat, String api, int troop, int scout, String[] commands) {
		
		super(mat);
		this.setBlockTextureName("pinoccio:scoutScriptBlock");
		this.setCreativeTab(CreativeTabs.tabRedstone);
		this.setBlockName("scoutScriptBlock");
		this.troopId = troop;
		this.scoutId = scout;
		this.apiKey = api;
		this.commands = commands;
		this.setTickRandomly(false);
		
	}

	public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int par6, float par7, float par8, float par9)
    {
		Minecraft.getMinecraft().thePlayer.sendChatMessage("Command: " + commands[this.getDamageValue(world, x, y, z)]);
        return true;
    }
	public void onNeighborBlockChange(World world, int x, int y, int z, Block id)
    {
		Block upBlock = world.getBlock(x, y + 1, z);
				
        if (!world.isRemote)
        {
            if (world.isBlockIndirectlyGettingPowered(x, y, z))
            {
	            try {	
	            	this.pinoccioAPI.runBitlashCommand(this.troopId, this.scoutId, commands[this.getDamageValue(world, x, y, z)], this.apiKey);
	            	this.isProvidingStrongPower(world, x, y, z, z);
	            	Minecraft.getMinecraft().thePlayer.sendChatMessage("Command: " + commands[this.getDamageValue(world, x, y, z)]);
	            } catch (Exception e) {
	            	Minecraft.getMinecraft().thePlayer.sendChatMessage("Command could not be sent, please check your Pinoccio Scout"); 
	            }
            }            	
        }
    }
	
	public int isProvidingStrongPower(World world, int x, int y, int z, int par5)
    {
		if (world.isBlockIndirectlyGettingPowered(x, y, z))
        {
        	return 0;
        } else {
        	return 0;
        }   
    }
	
	@Override
	public int damageDropped(int meta) {
	    return meta;
	}

	@Override
	public void getSubBlocks(Item item, CreativeTabs tab, List list) {
	    for (int i = 0; i < this.commands.length; i ++) {
	        list.add(new ItemStack(item, 1, i));
	    }
	}
}
